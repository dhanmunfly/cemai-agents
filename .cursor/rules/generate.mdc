---
alwaysApply: true
---

# CemAI Agents - Code Generation Rules

## AI Assistant Behavior Guidelines

### Code Generation Standards
- Always follow enterprise-grade development patterns
- Implement comprehensive error handling and logging
- Use type hints and docstrings for all Python code
- Follow Google Cloud best practices for all GCP integrations
- Ensure all code is production-ready with proper security measures

### Agent Development Rules
1. **Guardian Agent Code**: Focus on stability, predictive monitoring, and minimal effective actions
2. **Optimizer Agent Code**: Implement constraint-based optimization and market-aware algorithms  
3. **Master Control Agent Code**: Use LangGraph for stateful workflows and Gemini for reasoning
4. **Egress Agent Code**: Prioritize security and validation for plant system communication

### Architecture Patterns
- Microservices with clear separation of concerns
- Event-driven architecture using Pub/Sub
- Zero-trust security implementation
- Comprehensive observability and monitoring

### Code Quality Requirements
- Unit tests for all functions (>90% coverage)
- Integration tests for agent communication
- Security tests for all external interfaces
- Performance tests for critical paths

### Documentation Standards
- API documentation with OpenAPI/Swagger specs
- Architectural decision records (ADRs)
- Deployment runbooks and troubleshooting guides
- Security and compliance documentation

### Technology Stack Enforcement
- **Backend**: Python 3.11+, FastAPI, SQLAlchemy
- **AI/ML**: Google Cloud Vertex AI, LangChain, LangGraph
- **Infrastructure**: Terraform, Cloud Run, AlloyDB
- **Security**: IAM, VPC Service Controls, Cloud KMS
- **Monitoring**: Cloud Trace, Cloud Logging, Prometheus

### Security Requirements
- All secrets stored in Secret Manager
- IAM service accounts with least privilege
- Input validation for all external data
- Comprehensive audit logging
- Encrypted communication (TLS 1.3+)

### Performance Requirements
- Decision latency <60 seconds
- API response time <2 seconds (P99)
- System availability >99.95%
- Auto-scaling based on demand# CemAI Agents - Code Generation Rules

## AI Assistant Behavior Guidelines

### Code Generation Standards
- Always follow enterprise-grade development patterns
- Implement comprehensive error handling and logging
- Use type hints and docstrings for all Python code
- Follow Google Cloud best practices for all GCP integrations
- Ensure all code is production-ready with proper security measures

### Agent Development Rules
1. **Guardian Agent Code**: Focus on stability, predictive monitoring, and minimal effective actions
2. **Optimizer Agent Code**: Implement constraint-based optimization and market-aware algorithms  
3. **Master Control Agent Code**: Use LangGraph for stateful workflows and Gemini for reasoning
4. **Egress Agent Code**: Prioritize security and validation for plant system communication

### Architecture Patterns
- Microservices with clear separation of concerns
- Event-driven architecture using Pub/Sub
- Zero-trust security implementation
- Comprehensive observability and monitoring

### Code Quality Requirements
- Unit tests for all functions (>90% coverage)
- Integration tests for agent communication
- Security tests for all external interfaces
- Performance tests for critical paths

### Documentation Standards
- API documentation with OpenAPI/Swagger specs
- Architectural decision records (ADRs)
- Deployment runbooks and troubleshooting guides
- Security and compliance documentation

### Technology Stack Enforcement
- **Backend**: Python 3.11+, FastAPI, SQLAlchemy
- **AI/ML**: Google Cloud Vertex AI, LangChain, LangGraph
- **Infrastructure**: Terraform, Cloud Run, AlloyDB
- **Security**: IAM, VPC Service Controls, Cloud KMS
- **Monitoring**: Cloud Trace, Cloud Logging, Prometheus

### Security Requirements
- All secrets stored in Secret Manager
- IAM service accounts with least privilege
- Input validation for all external data
- Comprehensive audit logging
- Encrypted communication (TLS 1.3+)

### Performance Requirements
- Decision latency <60 seconds
- API response time <2 seconds (P99)
- System availability >99.95%
- Auto-scaling based on demand